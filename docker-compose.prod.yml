version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: l1xi_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-l1xi_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-l1xi_password}
      POSTGRES_DB: ${POSTGRES_DB:-l1xi_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-l1xi_user} -d ${POSTGRES_DB:-l1xi_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l1xi_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      target: production
    container_name: l1xi_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-l1xi_user}:${POSTGRES_PASSWORD:-l1xi_password}@postgres:5432/${POSTGRES_DB:-l1xi_db}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5000
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      DESKTOP_URL: ${DESKTOP_URL:-https://yourdomain.com}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      NODE_TLS_REJECT_UNAUTHORIZED: ${NODE_TLS_REJECT_UNAUTHORIZED:-1}
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/temp:/app/temp
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l1xi_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: production
    container_name: l1xi_frontend_prod
    restart: unless-stopped
    environment:
      VITE_API_URL: ${API_URL:-https://yourdomain.com/api}
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l1xi_network

  # Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: l1xi_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - l1xi_network

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: l1xi_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - l1xi_network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: l1xi_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l1xi_network

volumes:
  postgres_data:
  redis_data:

networks:
  l1xi_network:
    driver: bridge