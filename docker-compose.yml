services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: l1xi_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l1xi_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      target: production
    container_name: l1xi_backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT}
      FRONTEND_URL: ${FRONTEND_URL}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
    ports:
      - "3005:${PORT:-5000}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/temp:/app/temp
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT:-5000}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l1xi_network
      - proxy-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: production
    container_name: l1xi_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    ports:
      - "3006:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - l1xi_network
      - proxy-network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: l1xi_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - l1xi_network

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4
    container_name: l1xi_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5051:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - l1xi_network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  l1xi_network:
    driver: bridge
  proxy-network:
    external: true